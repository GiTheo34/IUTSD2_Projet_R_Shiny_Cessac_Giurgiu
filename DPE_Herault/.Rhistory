herault = read.csv(file = "C:/Users/Théo/OneDrive/Bureau/BUT/2ème année/R shiny/Projet-R-Herault/adresses-34.csv", header = TRUE, sep = ";")
cp_herault = unique(herault$code_postal)
df= data.frame()
for (i in cp_herault) {
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = 10000,
select = "Identifiant__BAN,Code_postal_(BAN),N°DPE,Etiquette_DPE,Date_réception_DPE",
q = i,
q_fields = "Code_postal_(BAN)"
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
# Effectuer la requête
response <- GET(url_encoded)
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher les données récupérées
df = rbind(df, content$result)
}
library(shiny)
library(httr)
library(jsonlite)
library(bslib)
library(mapsapi)
library(leaflet)
library(dplyr)
library(ggplot2)
library(shiny)
library(leaflet)
library(opencage)
for (i in cp_herault) {
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = 10000,
select = "Identifiant__BAN,Code_postal_(BAN),N°DPE,Etiquette_DPE,Date_réception_DPE",
q = i,
q_fields = "Code_postal_(BAN)"
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
# Effectuer la requête
response <- GET(url_encoded)
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher les données récupérées
df = rbind(df, content$result)
}
df$id = df$Identifiant__BAN
df <- merge(df, herault[, c("id", "lon", "lat")], by = "id", all.x = TRUE)
View(df)
df = df[,-2]
View(df)
write.table(df, file = "DPE_Herault.csv", col.names = TRUE, row.names = FALSE, sep = ";", dec = ".")
runApp()
View(df)
data = read.csv(file = "C:/Users/Théo/OneDrive/Bureau/BUT/2ème année/R shiny/Projet-R-Herault/DPE_Herault/DPE_Herault.csv", header = TRUE, sep = ";")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(herault)
df= data.frame()
for (i in cp_herault) {
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = 10000,
select = "Identifiant__BAN,Code_postal_(BAN),N°DPE,Etiquette_DPE,Date_réception_DPE",
q = i,
q_fields = "Code_postal_(BAN)"
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
# Effectuer la requête
response <- GET(url_encoded)
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher les données récupérées
df = rbind(df, content$result)
}
df$id = df$Identifiant__BAN
df <- merge(df, herault[, c("id", "lon", "lat", "numero", "rep", "nom_voie", "nom_commune")], by = "id", all.x = TRUE)
df = df[,-2]
write.table(df, file = "DPE_Herault.csv", col.names = TRUE, row.names = FALSE, sep = ";", dec = ".")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("kable")
library(kable)
install.packages("kableExtra")
library(kableExtra)
runApp()
runApp()
runApp()
runApp()
